// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UDPFRAG_H_
#define FLATBUFFERS_GENERATED_UDPFRAG_H_

#include "flatbuffers/flatbuffers.h"

struct UdpFrag;
struct UdpFragT;

bool operator==(const UdpFragT &lhs, const UdpFragT &rhs);

struct UdpFragT : public flatbuffers::NativeTable {
  typedef UdpFrag TableType;
  uint8_t sequenceNum;
  uint8_t totalNum;
  std::vector<uint8_t> data;
  UdpFragT()
      : sequenceNum(1),
        totalNum(1) {
  }
};

inline bool operator==(const UdpFragT &lhs, const UdpFragT &rhs) {
  return
      (lhs.sequenceNum == rhs.sequenceNum) &&
      (lhs.totalNum == rhs.totalNum) &&
      (lhs.data == rhs.data);
}

struct UdpFrag FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UdpFragT NativeTableType;
  enum {
    VT_SEQUENCENUM = 4,
    VT_TOTALNUM = 6,
    VT_DATA = 8
  };
  uint8_t sequenceNum() const {
    return GetField<uint8_t>(VT_SEQUENCENUM, 1);
  }
  bool mutate_sequenceNum(uint8_t _sequenceNum) {
    return SetField<uint8_t>(VT_SEQUENCENUM, _sequenceNum, 1);
  }
  uint8_t totalNum() const {
    return GetField<uint8_t>(VT_TOTALNUM, 1);
  }
  bool mutate_totalNum(uint8_t _totalNum) {
    return SetField<uint8_t>(VT_TOTALNUM, _totalNum, 1);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SEQUENCENUM) &&
           VerifyField<uint8_t>(verifier, VT_TOTALNUM) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  UdpFragT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UdpFragT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<UdpFrag> Pack(flatbuffers::FlatBufferBuilder &_fbb, const UdpFragT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UdpFragBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sequenceNum(uint8_t sequenceNum) {
    fbb_.AddElement<uint8_t>(UdpFrag::VT_SEQUENCENUM, sequenceNum, 1);
  }
  void add_totalNum(uint8_t totalNum) {
    fbb_.AddElement<uint8_t>(UdpFrag::VT_TOTALNUM, totalNum, 1);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(UdpFrag::VT_DATA, data);
  }
  explicit UdpFragBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UdpFragBuilder &operator=(const UdpFragBuilder &);
  flatbuffers::Offset<UdpFrag> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UdpFrag>(end);
    return o;
  }
};

inline flatbuffers::Offset<UdpFrag> CreateUdpFrag(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t sequenceNum = 1,
    uint8_t totalNum = 1,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  UdpFragBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_totalNum(totalNum);
  builder_.add_sequenceNum(sequenceNum);
  return builder_.Finish();
}

inline flatbuffers::Offset<UdpFrag> CreateUdpFragDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t sequenceNum = 1,
    uint8_t totalNum = 1,
    const std::vector<uint8_t> *data = nullptr) {
  return CreateUdpFrag(
      _fbb,
      sequenceNum,
      totalNum,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

flatbuffers::Offset<UdpFrag> CreateUdpFrag(flatbuffers::FlatBufferBuilder &_fbb, const UdpFragT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UdpFragT *UdpFrag::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new UdpFragT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void UdpFrag::UnPackTo(UdpFragT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = sequenceNum(); _o->sequenceNum = _e; };
  { auto _e = totalNum(); _o->totalNum = _e; };
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<UdpFrag> UdpFrag::Pack(flatbuffers::FlatBufferBuilder &_fbb, const UdpFragT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUdpFrag(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<UdpFrag> CreateUdpFrag(flatbuffers::FlatBufferBuilder &_fbb, const UdpFragT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const UdpFragT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _sequenceNum = _o->sequenceNum;
  auto _totalNum = _o->totalNum;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return CreateUdpFrag(
      _fbb,
      _sequenceNum,
      _totalNum,
      _data);
}

#endif  // FLATBUFFERS_GENERATED_UDPFRAG_H_
